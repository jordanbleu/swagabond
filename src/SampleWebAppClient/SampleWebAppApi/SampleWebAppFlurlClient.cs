//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by a tool. 
//
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using Flurl;
using Flurl.Http;
using SampleWebAppApi.Models;

namespace SampleWebAppApi;

/// <summary>
/// /// This is a sample web api for testing / demo purposes for Swagabond.
/// </summary>
public class SampleWebAppFlurlClient : ISampleWebAppClient
{
    private readonly string _baseUrl = string.Empty;

    public SampleWebAppFlurlClient(string baseUrl)
    {
        _baseUrl = baseUrl;
    }

    /// <remarks>
    /// GET /api/v1/franchises
    /// </remarks>
    public async Task<SamplewebappControllersFranchisegetresponseitem[]> GetApiV1FranchisesAsync(Dictionary<string, string> requestHeaders)
    {
        var path = "/api/v1/franchises";

        var response = await _baseUrl
            .AppendPathSegment(path)
            .WithHeaders(requestHeaders)
            .GetAsync();

        return await DeserializeFlurlResponse<SamplewebappControllersFranchisegetresponseitem[]>(response);

    }
    /// <remarks>
    /// GET /api/v1/menuitems
    /// </remarks>
    public async Task<SamplewebappControllersMenuitemresponse> GetApiV1MenuitemsAsync(Dictionary<string, string> requestHeaders)
    {
        var path = "/api/v1/menuitems";

        var response = await _baseUrl
            .AppendPathSegment(path)
            .WithHeaders(requestHeaders)
            .GetAsync();

        return await DeserializeFlurlResponse<SamplewebappControllersMenuitemresponse>(response);

    }
    /// <remarks>
    /// POST /api/v1/menuitems
    /// </remarks>
    public async Task<SamplewebappControllersMenuitemresponseitem> PostApiV1MenuitemsAsync(Dictionary<string, string> requestHeaders, SamplewebappControllersMenutitempostrequest apiV1MenuitemsPostRequest)
    {
        var path = "/api/v1/menuitems";

        var response = await _baseUrl
            .AppendPathSegment(path)
            .WithHeaders(requestHeaders)
            .PostAsync();

        return await DeserializeFlurlResponse<SamplewebappControllersMenuitemresponseitem>(response);

    }
    /// <remarks>
    /// GET /api/v1/menuitems/{id}
    /// </remarks>
    public async Task<SamplewebappControllersMenuitemresponseitem> GetApiV1MenuitemsidAsync(Dictionary<string, string> requestHeaders, Guid id)
    {
        var path = "/api/v1/menuitems/{id}";
        path = path.Replace("{id}", id.ToString(), StringComparison.OrdinalIgnoreCase);

        var response = await _baseUrl
            .AppendPathSegment(path)
            .WithHeaders(requestHeaders)
            .GetAsync();

        return await DeserializeFlurlResponse<SamplewebappControllersMenuitemresponseitem>(response);

    }
    /// <remarks>
    /// GET /api/v1/menuitems/{id}/full
    /// </remarks>
    public async Task<SamplewebappControllersFullmenuitemgetresponse> GetApiV1MenuitemsidFullAsync(Dictionary<string, string> requestHeaders, Guid id)
    {
        var path = "/api/v1/menuitems/{id}/full";
        path = path.Replace("{id}", id.ToString(), StringComparison.OrdinalIgnoreCase);

        var response = await _baseUrl
            .AppendPathSegment(path)
            .WithHeaders(requestHeaders)
            .GetAsync();

        return await DeserializeFlurlResponse<SamplewebappControllersFullmenuitemgetresponse>(response);

    }
    /// <remarks>
    /// GET /api/v1/restaurants
    /// </remarks>
    public async Task<SamplewebappControllersRestaurantgetresponse> GetApiV1RestaurantsAsync(Dictionary<string, string> requestHeaders)
    {
        var path = "/api/v1/restaurants";

        var response = await _baseUrl
            .AppendPathSegment(path)
            .WithHeaders(requestHeaders)
            .GetAsync();

        return await DeserializeFlurlResponse<SamplewebappControllersRestaurantgetresponse>(response);

    }
    /// <remarks>
    /// POST /api/v1/restaurants
    /// </remarks>
    public async Task<SamplewebappControllersRestaurantgetresponseitem> PostApiV1RestaurantsAsync(Dictionary<string, string> requestHeaders, SamplewebappControllersRestaurantpostrequest apiV1RestaurantsPostRequest)
    {
        var path = "/api/v1/restaurants";

        var response = await _baseUrl
            .AppendPathSegment(path)
            .WithHeaders(requestHeaders)
            .PostAsync();

        return await DeserializeFlurlResponse<SamplewebappControllersRestaurantgetresponseitem>(response);

    }
    /// <remarks>
    /// GET /api/v1/restaurants/{id}
    /// </remarks>
    public async Task<SamplewebappControllersRestaurantgetresponseitem> GetApiV1RestaurantsidAsync(Dictionary<string, string> requestHeaders, Guid id)
    {
        var path = "/api/v1/restaurants/{id}";
        path = path.Replace("{id}", id.ToString(), StringComparison.OrdinalIgnoreCase);

        var response = await _baseUrl
            .AppendPathSegment(path)
            .WithHeaders(requestHeaders)
            .GetAsync();

        return await DeserializeFlurlResponse<SamplewebappControllersRestaurantgetresponseitem>(response);

    }
    /// <remarks>
    /// DELETE /api/v1/restaurants/{id}
    /// </remarks>
    public async Task<string> DeleteApiV1RestaurantsidAsync(Dictionary<string, string> requestHeaders, Guid id)
    {
        var path = "/api/v1/restaurants/{id}";
        path = path.Replace("{id}", id.ToString(), StringComparison.OrdinalIgnoreCase);

        var response = await _baseUrl
            .AppendPathSegment(path)
            .WithHeaders(requestHeaders)
            .DeleteAsync();

        return await DeserializeFlurlResponse<string>(response);

    }


    /// <summary>
    /// Deserializes a FlurlResponse as the proper type <typeparam="T"/>
    /// </summary>
    private static async Task<T> DeserializeFlurlResponse<T>(IFlurlResponse response)
    {
        // if T is string return getstringasync
        if (typeof(T) == typeof(string))
        {
            return (T)(object)(await response.GetStringAsync());
        }
        else
        {
            return await response.GetJsonAsync<T>();
        }
    }



}
