{{-
	func x_GetPathParts(path)
		parts = path | string.split '/'
		result = []
		
		for part in parts
			if part == ""
				continue
			end

			if part | string.starts_with "{"
				name = f_Substring(part, 1, part | string.size - 2)			
				result += [":" + name]
			else
				result += [part]
			end
		end

		ret result
	end
-}}
{
    "info": {
        "_postman_id": "{{Metadata.PostmanProjectId}}",
        "name": "{{Name}}",
		"description": "{{Description}} -- *[Postman project generated by Swagabond](https://github.com/jordanbleu/swagabond)*",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25722957"
    },
    "item": [
        {{~for o in Operations~}}
        {
			"name": "{{o.Name}}",
			"description": "{{o.Description}}",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "{{f_Upper o.Method}}",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": {{f_JsonString o.RequestBody.Schema.JsonExample}},
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{f_WrapDoubleBraces "baseUrl"}}{{o.Path.Route}}",
					"host": [
						"{{f_WrapDoubleBraces "baseUrl"}}"
					],
					"path": [
						{{~for part in x_GetPathParts(o.Path.Route)~}}
						"{{part}}"{{~if for.last == false~}},{{~end~}}

						{{~end~}} {{#/for part in x_GetPathParts o.Path.Route}}
					]
				}
			},
			"response": []
		}{{if for.last == false}},{{end}}
        {{end}}{{#/for o in operations}}
    ],
    "variable": [
        {
            "key": "baseUrl",
            "value": "{{f_FirstItem BaseUrls}}",
            "type": "string"
        }
    ]
}