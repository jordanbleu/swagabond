//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by a tool. 
//
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using Flurl;
using Flurl.Http;
using {{f_PascalCase Info.Title}}Client.Models;

namespace {{f_PascalCase Info.Title}}Client;

public class {{f_PascalCase Info.Title}}FlurlClient : I{{f_PascalCase Info.Title}}FlurlClient
{
    private readonly string _baseUrl = string.Empty;

    public {{f_PascalCase Info.Title}}FlurlClient(string baseUrl)
    {
        _baseUrl = baseUrl;
    }

{{~for operation in Operations~}}
    public async {{buildMethodSignatureForOperation(operation)}}
    {
        var path = "{{operation.Path.Route}}";
        {{~if operation.HasPathParameters~}}
        // todo: implement path params :) 
        {{~end~}}
        var response = await _baseUrl
            .AppendPathSegment(path)
            .WithHeaders(headers)
            {{~for queryParam in operation.QueryParameters~}}
            .SetQueryParam("{{queryParam.Name}}", {{f_CamelCase queryParam.Name}})
            {{~end~}}{{~#/ for queryParam in operation.QueryParameters~}}
            .{{operation.Method}}Async();

        {{~if !operation.SuccessResponse.IsEmpty~}}
        return await DeserializeFlurlResponse<{{cSharpTypeFromSchema(operation.SuccessResponse.Schema)}}>(response);
        {{~end~}} {{#/if !operation.SuccessResponse.IsEmpty}}
    }

{{~end~}}{{#/operation in Operations}}

    /// <summary>
    /// Uses hacky logic to properly deserialize strings or objects.
    /// </summary>
    private async Task<T> DeserializeFlurlResponse<T>(IFlurlResponse response)
    {
        // if T is string return getstringasync
        if (typeof(T) == typeof(string))
        {
            return (T)(object)(await response.GetStringAsync());
        }
        else
        {
            return await response.GetJsonAsync<T>();
        }
    }
}

// Template written by {{Metadata.Company}}