//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by a tool. 
//
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using Flurl;
using Flurl.Http;
using {{Name}}Api.Models;

namespace {{Name}}Api;

{{~if !f_IsBlank Description ~}}
/// <summary>
/// {{f_PrefixNewlines Description "/// "}}
/// </summary>
{{~end~}}{{~#/if description != empty~}}
public class {{Name}}FlurlClient : I{{Name}}Client
{
    private readonly string _baseUrl = string.Empty;

    public {{Name}}FlurlClient(string baseUrl)
    {
        _baseUrl = baseUrl;
    }

    {{~for operation in Operations~}}
    {{~if !f_IsBlank operation.Description~}}
    /// <summary>
    /// {{f_PrefixNewlines operation.Description "/// "}}
    /// </summary
    {{~end~}}{{~#/if operation.Description != empty~}}
    /// <remarks>
    /// {{f_Upper operation.Method}} {{operation.Path.Route}}
    /// </remarks>
    public async {{x_BuildMethodSignatureForOperation operation}}
    {
        var path = "{{operation.Path.Route}}";
        {{~for pathParam in operation.PathParameters~}}
        path = path.Replace("{{"{"}}{{pathParam.OriginalName}}{{"}"}}", {{f_CamelCase pathParam.Name}}.ToString(), StringComparison.OrdinalIgnoreCase);
        {{~end~}}

        var response = await _baseUrl
            .AppendPathSegment(path)
            .WithHeaders(requestHeaders)
            {{~for queryParam in operation.QueryParameters~}}
            .SetQueryParam("{{queryParam.OriginalName}}", {{f_CamelCase queryParam.Name}})
            {{~end~}}{{~#/ for queryParam in operation.QueryParameters~}}
            .{{operation.Method}}Async();

        {{~if !operation.SuccessResponseBody.IsEmpty~}}
        return await DeserializeFlurlResponse<{{x_CSharpType operation.SuccessResponseBody.Schema.DataType operation.SuccessResponseBody.Schema.IsEnum operation.SuccessResponseBody.Schema.IsArray operation.SuccessResponseBody.Schema.Name}}>(response);
        {{~end~}} {{#/if !operation.SuccessResponse.IsEmpty}}
    }
    {{~end~}} {{#/for op in Operations}}

    /// <summary>
    /// Deserializes a FlurlResponse as the proper type <typeparam="T"/>
    /// </summary>
    private static async Task<T> DeserializeFlurlResponse<T>(IFlurlResponse response)
    {
        // if T is string return getstringasync
        if (typeof(T) == typeof(string))
        {
            return (T)(object)(await response.GetStringAsync());
        }
        else
        {
            return await response.GetJsonAsync<T>();
        }
    }



}