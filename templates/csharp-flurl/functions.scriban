{{-

# given a swagger type / format, returns a reasonable C# type.
func cSharpType(type, format)

    type = f_Lower(type)
    format = f_Lower (format)

    # Handle different types and formats
    if type == "string"
        if format == "date-time"
            ret "DateTime"
        else if format == "uuid"
            ret "Guid"
        else
            ret "string"
        end
    else if type == "integer"
        if format == "int32"
            ret "int"
        else if format == "int64"
            ret "long"
        else
            ret "int"
        end
    else if type == "number"
        if format == "float"
            ret "float"
        else if format == "double"
            ret "double"
        else
            ret "decimal"
        end
    else if type == "boolean"
        ret "bool"
    end

    # if we get to this point then we have some wacky data.
    f_Log("Not sure how to map Type " + type + " and format " + format + ", so defaulting to string.")
    ret "string"
end


func cSharpTypeFromSchema(schema)
    if !schema.IsEmpty && f_Lower(schema.Type) == "object"
        ret f_LastDottedSegment(schema.ReferenceSchemaId)
    end

    ret cSharpType(schema.Type, schema.Format)
end

# builds a full method signature given an operation
func buildMethodSignatureForOperation(operation)

    # Build a method name 
    $httpMethod = operation.Method
    $pathName = f_PascalCase(operation.Path.Name)
    $methodName = $httpMethod + $pathName + "Async"

    # Figure out a response object
    $returnObject = "Task"
    if !operation.SuccessResponse.IsEmpty
        $csharpReturnType = cSharpTypeFromSchema(operation.SuccessResponse.Schema)
        $returnObject = "Task<" + $csharpReturnType + ">"
    end

    # Add a request body if one exists
    $parameterString = "Dictionary<string, string> headers"

    if (operation.HasQueryParameters || operation.HasPathParameters || operation.HasRequestBody)
        $parameterString = $parameterString + ", "
    end

    if (operation.HasRequestBody)
        $parameterString = $parameterString + cSharpTypeFromSchema(operation.RequestBody.Schema) + " request"
        
        # if there are also body or path parameters toss in a comma 
        if (operation.HasQueryParameters || operation.HasPathParameters)
            $parameterString = $parameterString + ", "
        end
    end
    
    # Add Path Parameters 
    $index = 0
    for pathParam in operation.pathParameters
        $pathParamType = cSharpType(pathParam.Type, pathParam.Format)
        $pathParamName = f_CamelCase(pathParam.Name)
        $parameterString = $parameterString + $pathParamType + " " + $pathParamName

        $index = $index + 1

        if ($index < operation.PathParameters.size or operation.HasQueryParameters) 
            $parameterString = $parameterString + ", "
        end
    end


    # Add Query Parameters 
    $index = 0
    for queryParam in operation.QueryParameters
        $queryParamType = cSharpType(queryParam.Type, queryParam.Format)
        $queryParamName = f_CamelCase(queryParam.Name)
        $parameterString = $parameterString + $queryParamType + " " + $queryParamName

        $index = $index + 1

        if ($index < operation.QueryParameters.size)
            $parameterString = $parameterString + ", "
        end
    end

    ret $returnObject + " " + $methodName + "(" + $parameterString + ")"
end

-}}